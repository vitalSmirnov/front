{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/shared/api/index.ts"],"sourcesContent":["import axios from \"axios\"\r\n\r\n// Read a cookie value by name (browser-only)\r\nconst getCookie = (name: string): string | undefined => {\r\n  if (typeof document === \"undefined\") return undefined\r\n  const match = document.cookie.split(\"; \").find(row => row.startsWith(`${name}=`))\r\n  const value = match?.split(\"=\")[1]\r\n  return value ? decodeURIComponent(value) : undefined\r\n}\r\n\r\nexport const AxiosInstance = axios.create({\r\n  baseURL: \"/api\",\r\n  withCredentials: true,\r\n})\r\nAxiosInstance.interceptors.request.use(\r\n  async config => {\r\n    if (config.headers) config.headers[\"Content-Type\"] = \"application/json\"\r\n\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nAxiosInstance.interceptors.response.use(\r\n  response => {\r\n    return response\r\n  },\r\n  async (error: any) => {\r\n    const originalRequest = error.config\r\n    if (\r\n      error.response?.status === 401 &&\r\n      !originalRequest.url?.includes(\"/auth/login\") &&\r\n      !originalRequest.url?.includes(\"/auth/refresh\") &&\r\n      !originalRequest.url?.includes(\"/auth/register\") &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true\r\n      try {\r\n        // Call refresh without body; let server read refresh token from HttpOnly cookie\r\n        const refreshRes = await axios.post(\"/api/auth/refresh\", undefined, { withCredentials: true })\r\n        const newToken = refreshRes.data.accessToken\r\n\r\n        if (typeof sessionStorage !== \"undefined\") {\r\n          sessionStorage.setItem(\"accessToken\", newToken)\r\n        }\r\n\r\n        // ensure headers before mutation\r\n        if (!originalRequest.headers) originalRequest.headers = {}\r\n        originalRequest.headers.Authorization = `Bearer ${newToken}`\r\n\r\n        return AxiosInstance(originalRequest)\r\n      } catch (refreshError) {\r\n        console.error(\"Failed to refresh token\", refreshError)\r\n        return Promise.reject(refreshError)\r\n      }\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,6CAA6C;AAC7C,MAAM,YAAY,CAAC;IACjB,IAAI,OAAO,aAAa,aAAa,OAAO;IAC5C,MAAM,QAAQ,SAAS,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAA,MAAO,IAAI,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC;IAC/E,MAAM,QAAQ,OAAO,MAAM,IAAI,CAAC,EAAE;IAClC,OAAO,QAAQ,mBAAmB,SAAS;AAC7C;AAEO,MAAM,gBAAgB,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACxC,SAAS;IACT,iBAAiB;AACnB;AACA,cAAc,YAAY,CAAC,OAAO,CAAC,GAAG,CACpC,OAAM;IACJ,IAAI,OAAO,OAAO,EAAE,OAAO,OAAO,CAAC,eAAe,GAAG;IAErD,OAAO;AACT,GACA,CAAA;IACE,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,cAAc,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAA;IACE,OAAO;AACT,GACA,OAAO;IACL,MAAM,kBAAkB,MAAM,MAAM;IACpC,IACE,MAAM,QAAQ,EAAE,WAAW,OAC3B,CAAC,gBAAgB,GAAG,EAAE,SAAS,kBAC/B,CAAC,gBAAgB,GAAG,EAAE,SAAS,oBAC/B,CAAC,gBAAgB,GAAG,EAAE,SAAS,qBAC/B,CAAC,gBAAgB,MAAM,EACvB;QACA,gBAAgB,MAAM,GAAG;QACzB,IAAI;YACF,gFAAgF;YAChF,MAAM,aAAa,MAAM,qIAAA,CAAA,UAAK,CAAC,IAAI,CAAC,qBAAqB,WAAW;gBAAE,iBAAiB;YAAK;YAC5F,MAAM,WAAW,WAAW,IAAI,CAAC,WAAW;YAE5C,IAAI,OAAO,mBAAmB,aAAa;gBACzC,eAAe,OAAO,CAAC,eAAe;YACxC;YAEA,iCAAiC;YACjC,IAAI,CAAC,gBAAgB,OAAO,EAAE,gBAAgB,OAAO,GAAG,CAAC;YACzD,gBAAgB,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,UAAU;YAE5D,OAAO,cAAc;QACvB,EAAE,OAAO,cAAc;YACrB,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,QAAQ,MAAM,CAAC;QACxB;IACF;IACA,OAAO,QAAQ,MAAM,CAAC;AACxB","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/shared/api/server.ts"],"sourcesContent":["import axios from \"axios\"\r\n\r\n// Server-only Axios instance using absolute backend URL\r\nconst backendURL = process.env.NEXT_PUBLIC_API_REDIRECT_URL || process.env.API_URL || \"http://localhost:3000/api\"\r\n\r\nexport const AxiosServerInstance = axios.create({\r\n  baseURL: backendURL,\r\n  withCredentials: true,\r\n})\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,wDAAwD;AACxD,MAAM,aAAa,iEAA4C,QAAQ,GAAG,CAAC,OAAO,IAAI;AAE/E,MAAM,sBAAsB,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IAC9C,SAAS;IACT,iBAAiB;AACnB","debugId":null}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/widgets/TicketList/api/index.tsx"],"sourcesContent":["import { AxiosInstance } from \"../../../shared/api\"\r\nimport { AxiosServerInstance } from \"../../../shared/api/server\"\r\nimport { GetTicketsPayload, GetTicketsResponse } from \"../types\"\r\n\r\nexport const getServerTicketList = async (payload: GetTicketsPayload) => {\r\n  return await AxiosServerInstance.get<GetTicketsResponse[]>(\"/tickets\", { params: payload })\r\n}\r\n\r\nexport const approoveTicket = async (id: string) => {\r\n  return await AxiosInstance.post(`/tickets/${id}/approve`, {})\r\n}\r\nexport const declineTicket = async (id: string) => {\r\n  return await AxiosInstance.post(`/tickets/${id}/decline`, {})\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,MAAM,sBAAsB,OAAO;IACxC,OAAO,MAAM,8HAAA,CAAA,sBAAmB,CAAC,GAAG,CAAuB,YAAY;QAAE,QAAQ;IAAQ;AAC3F;AAEO,MAAM,iBAAiB,OAAO;IACnC,OAAO,MAAM,6HAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;AAC7D;AACO,MAAM,gBAAgB,OAAO;IAClC,OAAO,MAAM,6HAAA,CAAA,gBAAa,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;AAC7D","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/features/FilterForm/ui/index.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const FilterForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call FilterForm() from the server but FilterForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/FilterForm/ui/index.tsx <module evaluation>\",\n    \"FilterForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,sEACA","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/features/FilterForm/ui/index.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const FilterForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call FilterForm() from the server but FilterForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/features/FilterForm/ui/index.tsx\",\n    \"FilterForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,kDACA","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/entities/TicketTable/ui/index.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TicketTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call TicketTable() from the server but TicketTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/entities/TicketTable/ui/index.tsx <module evaluation>\",\n    \"TicketTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,uEACA","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/entities/TicketTable/ui/index.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TicketTable = registerClientReference(\n    function() { throw new Error(\"Attempted to call TicketTable() from the server but TicketTable is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/entities/TicketTable/ui/index.tsx\",\n    \"TicketTable\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,cAAc,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EAC7C;IAAa,MAAM,IAAI,MAAM;AAAsO,GACnQ,mDACA","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/widgets/TicketList/ui/index.tsx"],"sourcesContent":["import { getServerTicketList } from \"../api\"\r\nimport { Ticket } from \"../../../shared/entities/Ticket/Ticket\"\r\nimport React from \"react\"\r\nimport { FilterForm } from \"../../../features/FilterForm/ui\"\r\nimport { TicketTable } from \"../../../entities/TicketTable/ui\"\r\n\r\nexport default async function TicketList({\r\n  searchParams,\r\n}: {\r\n  searchParams: { userName?: string; startDate?: string; endDate?: string; limit?: string; offset?: string }\r\n}) {\r\n  let initialData: Ticket[] = []\r\n  const { userName, startDate, endDate, limit, offset } = searchParams || {}\r\n\r\n  try {\r\n    initialData = await getServerTicketList({\r\n      ...searchParams,\r\n      userName: userName || undefined,\r\n      startDate: startDate ? new Date(startDate) : undefined,\r\n      endDate: endDate ? new Date(endDate) : undefined,\r\n      limit: limit ? Number(limit) : undefined,\r\n      offset: offset ? Number(offset) : undefined,\r\n    }).then(response => response.data)\r\n  } catch (error) {\r\n    console.error(\"Error fetching ticket list:\", error)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FilterForm />\r\n      <TicketTable data={initialData} />\r\n    </div>\r\n  )\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;;;;;AAEe,eAAe,WAAW,EACvC,YAAY,EAGb;IACC,IAAI,cAAwB,EAAE;IAC9B,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,gBAAgB,CAAC;IAEzE,IAAI;QACF,cAAc,MAAM,CAAA,GAAA,6IAAA,CAAA,sBAAmB,AAAD,EAAE;YACtC,GAAG,YAAY;YACf,UAAU,YAAY;YACtB,WAAW,YAAY,IAAI,KAAK,aAAa;YAC7C,SAAS,UAAU,IAAI,KAAK,WAAW;YACvC,OAAO,QAAQ,OAAO,SAAS;YAC/B,QAAQ,SAAS,OAAO,UAAU;QACpC,GAAG,IAAI,CAAC,CAAA,WAAY,SAAS,IAAI;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;IAC/C;IAEA,qBACE,8OAAC;;0BACC,8OAAC,6IAAA,CAAA,aAAU;;;;;0BACX,8OAAC,8IAAA,CAAA,cAAW;gBAAC,MAAM;;;;;;;;;;;;AAGzB","debugId":null}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/app/home/tickets/page.tsx"],"sourcesContent":["import TicketList from \"../../../widgets/TicketList/ui\"\n\nexport default async function TicketsPage(params: {\n  userName?: string\n  startDate?: string\n  endDate?: string\n  limit?: string\n  offset?: string\n}) {\n  return <TicketList searchParams={params} />\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe,YAAY,MAMzC;IACC,qBAAO,8OAAC,4IAAA,CAAA,UAAU;QAAC,cAAc;;;;;;AACnC","debugId":null}}]
}