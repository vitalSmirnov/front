{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/shared/router/routesEnum.ts"],"sourcesContent":["export enum RoutesEnum {\r\n  HOME = \"/\",\r\n  LOGIN = \"/auth/login\",\r\n  REGISTRATION = \"/auth/register\",\r\n  TICKETS = \"/home/tickets\",\r\n  REQUESTS = \"/requests\",\r\n}\r\n"],"names":[],"mappings":";;;AAAO,IAAA,AAAK,oCAAA;;;;;;WAAA","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/shared/api/index.ts"],"sourcesContent":["import { message } from \"antd\"\r\nimport axios from \"axios\"\r\n\r\nexport const AxiosInstance = axios.create({\r\n  baseURL: process.env.NEXT_PUBLIC_API_REDIRECT_URL,\r\n})\r\n\r\nAxiosInstance.interceptors.request.use(\r\n  config => {\r\n    const token = sessionStorage.getItem(\"accessToken\")\r\n    if (token) (config.headers as any).Authorization = `Bearer ${token}`\r\n\r\n    config.headers[\"Content-Type\"] = \"application/json\"\r\n\r\n    return config\r\n  },\r\n  error => {\r\n    message.error(\"Request error: \" + error.message)\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nAxiosInstance.interceptors.response.use(\r\n  response => {\r\n    return response\r\n  },\r\n  async error => {\r\n    const originalRequest = error.config\r\n    if (\r\n      error.response?.status === 401 &&\r\n      !originalRequest.url.includes(\"/api/auth/login\") &&\r\n      !originalRequest.url.includes(\"/api/auth/refresh\") &&\r\n      !originalRequest.url.includes(\"/api/auth/register\") &&\r\n      !originalRequest._retry\r\n    ) {\r\n      originalRequest._retry = true\r\n      try {\r\n        const refreshRes = await AxiosInstance.post(\"/api/auth/refresh\", {\r\n          refreshToken: localStorage.getItem(\"refreshToken\"),\r\n        })\r\n        const newToken = refreshRes.data.accessToken\r\n        sessionStorage.setItem(\"accessToken\", newToken)\r\n        // ensure headers before mutation\r\n        if (!originalRequest.headers) originalRequest.headers = {}\r\n        ;(originalRequest.headers as any).Authorization = `Bearer ${newToken}`\r\n        return AxiosInstance(originalRequest)\r\n      } catch (refreshError) {\r\n        console.error(\"Failed to refresh token\", refreshError)\r\n        return Promise.reject(refreshError)\r\n      }\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n"],"names":[],"mappings":";;;AAIW;AAJX;AACA;;;AAEO,MAAM,gBAAgB,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACxC,OAAO;AACT;AAEA,cAAc,YAAY,CAAC,OAAO,CAAC,GAAG,CACpC,CAAA;IACE,MAAM,QAAQ,eAAe,OAAO,CAAC;IACrC,IAAI,OAAO,AAAC,OAAO,OAAO,CAAS,aAAa,GAAG,AAAC,UAAe,OAAN;IAE7D,OAAO,OAAO,CAAC,eAAe,GAAG;IAEjC,OAAO;AACT,GACA,CAAA;IACE,uLAAA,CAAA,UAAO,CAAC,KAAK,CAAC,oBAAoB,MAAM,OAAO;IAC/C,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,cAAc,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAA;IACE,OAAO;AACT,GACA,OAAM;QAGF;IAFF,MAAM,kBAAkB,MAAM,MAAM;IACpC,IACE,EAAA,kBAAA,MAAM,QAAQ,cAAd,sCAAA,gBAAgB,MAAM,MAAK,OAC3B,CAAC,gBAAgB,GAAG,CAAC,QAAQ,CAAC,sBAC9B,CAAC,gBAAgB,GAAG,CAAC,QAAQ,CAAC,wBAC9B,CAAC,gBAAgB,GAAG,CAAC,QAAQ,CAAC,yBAC9B,CAAC,gBAAgB,MAAM,EACvB;QACA,gBAAgB,MAAM,GAAG;QACzB,IAAI;YACF,MAAM,aAAa,MAAM,cAAc,IAAI,CAAC,qBAAqB;gBAC/D,cAAc,aAAa,OAAO,CAAC;YACrC;YACA,MAAM,WAAW,WAAW,IAAI,CAAC,WAAW;YAC5C,eAAe,OAAO,CAAC,eAAe;YACtC,iCAAiC;YACjC,IAAI,CAAC,gBAAgB,OAAO,EAAE,gBAAgB,OAAO,GAAG,CAAC;YACvD,gBAAgB,OAAO,CAAS,aAAa,GAAG,AAAC,UAAkB,OAAT;YAC5D,OAAO,cAAc;QACvB,EAAE,OAAO,cAAc;YACrB,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,QAAQ,MAAM,CAAC;QACxB;IACF;IACA,OAAO,QAAQ,MAAM,CAAC;AACxB","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///D:/work/sickdays/front/src/features/RegisterUser/api/index.tsx"],"sourcesContent":["import { AxiosInstance } from \"../../../shared/api\"\r\nimport { TokenResponse } from \"../../LoginUser/types\"\r\nimport { CourseWithoutUsers, GroupWithoutUsers, RegisterCredentials } from \"../types\"\r\nimport { Course } from \"../../../shared/entities/Course/course\"\r\nimport { Group } from \"../../../shared/entities/Group/group\"\r\n\r\nexport const registerRequest = async (credentials: RegisterCredentials): Promise<TokenResponse> => {\r\n  return await AxiosInstance.post(`auth/register`, {\r\n    ...credentials,\r\n  })\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error register user:\", error)\r\n      return error\r\n    })\r\n}\r\nexport const getGroups = async (): Promise<GroupWithoutUsers[]> => {\r\n  return await AxiosInstance.get(`groups`)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error fetching tickets:\", error)\r\n      return error\r\n    })\r\n}\r\nexport const getCourses = async (): Promise<CourseWithoutUsers[]> => {\r\n  return await AxiosInstance.get(`courses`)\r\n    .then(response => {\r\n      return response.data\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error fetching tickets:\", error)\r\n      return error\r\n    })\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;;AAMO,MAAM,kBAAkB,OAAO;IACpC,OAAO,MAAM,gIAAA,CAAA,gBAAa,CAAC,IAAI,CAAE,iBAAgB;QAC/C,GAAG,WAAW;IAChB,GACG,IAAI,CAAC,CAAA;QACJ,OAAO,SAAS,IAAI;IACtB,GACC,KAAK,CAAC,CAAA;QACL,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO;IACT;AACJ;AACO,MAAM,YAAY;IACvB,OAAO,MAAM,gIAAA,CAAA,gBAAa,CAAC,GAAG,CAAE,UAC7B,IAAI,CAAC,CAAA;QACJ,OAAO,SAAS,IAAI;IACtB,GACC,KAAK,CAAC,CAAA;QACL,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;IACT;AACJ;AACO,MAAM,aAAa;IACxB,OAAO,MAAM,gIAAA,CAAA,gBAAa,CAAC,GAAG,CAAE,WAC7B,IAAI,CAAC,CAAA;QACJ,OAAO,SAAS,IAAI;IACtB,GACC,KAAK,CAAC,CAAA;QACL,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;IACT;AACJ","debugId":null}}]
}